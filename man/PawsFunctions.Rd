% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/apiutils_paws_functions.R
\name{PawsFunctions}
\alias{PawsFunctions}
\title{PawsFunctions class}
\description{
Class to convert lists to Paws api calls.
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-to_camel_case}{\code{PawsFunctions$to_camel_case()}}
\item \href{#method-to_snake_case}{\code{PawsFunctions$to_snake_case()}}
\item \href{#method-from_paws}{\code{PawsFunctions$from_paws()}}
\item \href{#method-to_paws}{\code{PawsFunctions$to_paws()}}
\item \href{#method-clone}{\code{PawsFunctions$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-to_camel_case"></a>}}
\if{latex}{\out{\hypertarget{method-to_camel_case}{}}}
\subsection{Method \code{to_camel_case()}}{
Convert a snake case string to camel case.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PawsFunctions$to_camel_case(snake_case)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{snake_case}}{(str): String to convert to camel case.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
(str): String converted to camel case.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-to_snake_case"></a>}}
\if{latex}{\out{\hypertarget{method-to_snake_case}{}}}
\subsection{Method \code{to_snake_case()}}{
Convert a camel case string to snake case.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PawsFunctions$to_snake_case(name)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{(str): String to convert to snake case.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
(str): String converted to snake case.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-from_paws"></a>}}
\if{latex}{\out{\hypertarget{method-from_paws}{}}}
\subsection{Method \code{from_paws()}}{
Convert an UpperCamelCase paws response to a snake case representation.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PawsFunctions$from_paws(
  paws_list,
  paws_name_to_member_name,
  member_name_to_type
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{paws_list}}{(list[str, ?]): A paws response dictionary.}

\item{\code{paws_name_to_member_name}}{(dict[str, str]):  A map from paws name to snake_case name.
If a given paws name is not in the map then a default mapping is applied.}

\item{\code{member_name_to_type}}{(list[str, (ApiObject, boolean)]): A map from snake case
name to a type description tuple. The first element of the tuple, a subclass of
ApiObject, is the type of the mapped object. The second element indicates whether the
mapped element is a collection or singleton.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
list: Paws response in snake case.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-to_paws"></a>}}
\if{latex}{\out{\hypertarget{method-to_paws}{}}}
\subsection{Method \code{to_paws()}}{
Convert a dict of of snake case names to values into a paws UpperCamelCase representation.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PawsFunctions$to_paws(
  member_vars,
  member_name_to_paws_name,
  member_name_to_type
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{member_vars}}{(list[str, ?]): A map from snake case name to value.}

\item{\code{member_name_to_paws_name}}{(list[str, ?]): A map from snake_case name to paws name.}

\item{\code{member_name_to_type}}{(list): A map from UpperCamelCase
name to a type description tuple. The first element of the tuple, a subclass of
ApiObject, is the type of the mapped object. The second element indicates whether the
mapped element is a collection or singleton.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
(list): paws dict converted to snake case
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PawsFunctions$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
