% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/input.R
\name{CompilationInput}
\alias{CompilationInput}
\title{CompilationInput}
\description{
Create a class containing all the parameters.
             It can be used when calling ``Model$compile_model()``
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{target_instance_type}}{Identifies the device that you want to run your model after compilation}

\item{\code{input_shape}}{Specifies the name and shape of the expected inputs for your trained model}

\item{\code{output_path}}{Specifies where to store the compiled model}

\item{\code{framework}}{The framework that is used to train the original model}

\item{\code{framework_version}}{The version of the framework}

\item{\code{compile_max_run}}{Timeout in seconds for compilation}

\item{\code{tags}}{List of tags for labelling a compilation job}

\item{\code{job_name}}{The name of the compilation job}

\item{\code{target_platform_os}}{Target Platform OS}

\item{\code{target_platform_arch}}{Target Platform Architecture}

\item{\code{target_platform_accelerator}}{Target Platform Accelerator}

\item{\code{compiler_options}}{Additional parameters for compiler}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{CompilationInput$new()}}
\item \href{#method-format}{\code{CompilationInput$format()}}
\item \href{#method-clone}{\code{CompilationInput$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Initialize CompilationInput class
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CompilationInput$new(
  target_instance_type = NULL,
  input_shape = NULL,
  output_path = NULL,
  framework = NULL,
  framework_version = NULL,
  compile_max_run = 15 * 60,
  tags = NULL,
  job_name = NULL,
  target_platform_os = NULL,
  target_platform_arch = NULL,
  target_platform_accelerator = NULL,
  compiler_options = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{target_instance_type}}{(str): Identifies the device that you want to
run your model after compilation, for example: ml_c5. For allowed
strings see
\url{https://docs.aws.amazon.com/sagemaker/latest/dg/API_OutputConfig.html}.}

\item{\code{input_shape}}{(str): Specifies the name and shape of the expected
inputs for your trained model in json dictionary form}

\item{\code{output_path}}{(str): Specifies where to store the compiled model}

\item{\code{framework}}{(str, optional): The framework that is used to train the original
model. Allowed values: 'mxnet', 'tensorflow', 'keras', 'pytorch',
'onnx', 'xgboost' (default: None)}

\item{\code{framework_version}}{(str, optional): The version of the framework (default: None)}

\item{\code{compile_max_run}}{(int, optional): Timeout in seconds for compilation (default:
15 * 60). After this amount of time Amazon SageMaker Neo
terminates the compilation job regardless of its current status.}

\item{\code{tags}}{(list[dict], optional): List of tags for labelling a compilation job.
For more, see
\url{https://docs.aws.amazon.com/sagemaker/latest/dg/API_Tag.html}.}

\item{\code{job_name}}{(str, optional): The name of the compilation job (default: None)}

\item{\code{target_platform_os}}{(str, optional): Target Platform OS, for example: 'LINUX'.
(default: None)
For allowed strings see
\url{https://docs.aws.amazon.com/sagemaker/latest/dg/API_OutputConfig.html}.
It can be used instead of target_instance_family.}

\item{\code{target_platform_arch}}{(str, optional): Target Platform Architecture, for example: 'X86_64'.
(default: None)
For allowed strings see
\url{https://docs.aws.amazon.com/sagemaker/latest/dg/API_OutputConfig.html}.
It can be used instead of target_instance_family.}

\item{\code{target_platform_accelerator}}{(str, optional): Target Platform Accelerator,
for example: 'NVIDIA'. (default: None)
For allowed strings see
\url{https://docs.aws.amazon.com/sagemaker/latest/dg/API_OutputConfig.html}.
It can be used instead of target_instance_family.}

\item{\code{compiler_options}}{(dict, optional): Additional parameters for compiler. (default: None)
Compiler Options are TargetPlatform / target_instance_family specific. See
\url{https://docs.aws.amazon.com/sagemaker/latest/dg/API_OutputConfig.html} for details.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-format"></a>}}
\if{latex}{\out{\hypertarget{method-format}{}}}
\subsection{Method \code{format()}}{
format class
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CompilationInput$format()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CompilationInput$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
